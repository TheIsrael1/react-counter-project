{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","className","href","Counter","prevProps","prevState","console","log","this","getBadgeClasses","formatCount","onClick","props","onIncrement","counter","onDecrement","formatButton","onDelete","id","classes","value","Component","Counters","onReset","counters","map","key","App","state","handleIncrement","index","indexOf","setState","handleDecrement","handleReset","c","handleDelete","counterId","filter","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1af3b63b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nconst NavBar = ({ totalCounters }) => {\r\n return (\r\n  <nav className=\"navbar navbar-light bg-light\">\r\n   <a className=\"navbar-brand\" href=\"#\"> Navbar <span className=\"badge badge-pill badge-secondary\">\r\n    {totalCounters}\r\n   </span></a>\r\n\r\n  </nav>\r\n );\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default NavBar\r\n ;","import React, { Component } from 'react';\r\n\r\nclass Counter extends Component {\r\n\r\n componentDidUpdate(prevProps, prevState) {\r\n  console.log(prevProps, 'prevProps');\r\n  console.log(prevState, 'prevState');\r\n\r\n }\r\n\r\n componentWillUnmount() {\r\n  console.log('Counter - Unmount');\r\n }\r\n\r\n render() {\r\n  // console.log('props', this.props);\r\n  return (\r\n   <div className=\"row \">\r\n    <div className=\"col-1 mr-2 \">\r\n     <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n    </div>\r\n    <div className=\"col\">\r\n     <button onClick={() => this.props.onIncrement(this.props.counter)} className=\"btn btn-secondary btn-sm mr-2\">+</button>\r\n     <button onClick={() => this.props.onDecrement(this.props.counter)} className={this.formatButton()}>-</button>\r\n     <button onClick={() => this.props.onDelete(this.props.counter.id)} className=\"btn btn-danger btn-sm m-2\">x\r\n\r\n    </button>\r\n\r\n    </div>\r\n   </div>\r\n  );\r\n }\r\n\r\n\r\n getBadgeClasses() {\r\n  let classes = \"badge m-2 badge-\";\r\n  classes += (this.props.counter.value === 0) ? \"warning\" : \"primary\";\r\n  return classes;\r\n }\r\n\r\n formatButton() {\r\n  let classes = \"btn btn-sm btn-secondary \"\r\n  classes += (this.props.counter.value === 0) ? \"disabled\" : \"\";\r\n  return classes;\r\n }\r\n\r\n formatCount() {\r\n  const { value } = this.props.counter;\r\n  return value === 0 ? 'zero' : value;\r\n }\r\n}\r\n\r\nexport default Counter;","import React, { Component } from 'react';\r\nimport Counter from './counter'\r\nclass Counters extends Component {\r\n\r\n\r\n  render() {\r\n    const { onReset, counters, onDelete, onIncrement } = this.props;\r\n\r\n    return (<div>\r\n      <button onClick={this.props.onReset} className=\"btn-primary btn-sm m-2\">Reset</button>\r\n      {this.props.counters.map(counter =>\r\n        <Counter key={counter.id} onDelete={this.props.onDelete} onIncrement={this.props.onIncrement} onDecrement={this.props.onDecrement} counter={counter} />)}\r\n    </div>);\r\n  }\r\n}\r\n\r\nexport default Counters;","import React, { Component } from 'react';\nimport NavBar from './components/navbar';\nimport './App.css';\nimport Counters from './components/counters'\n\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 }\n    ]\n  }\n\n  constructor() {\n    super();\n    console.log('App-Constructor');\n\n  }\n\n  componentDidMount() {\n\n    console.log('APP-Mouted');\n  }\n\n\n  handleIncrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n\n\n  }\n  handleDecrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter }\n    if (counters[index].value !== 0) {\n      counters[index].value--;\n    }\n    this.setState({ counters });\n\n  }\n\n  handleReset = () => {\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n\n    this.setState({ counters })\n\n  }\n\n  handleDelete = (counterId) => {\n    const counters = this.state.counters.filter(c => c.id !== counterId);\n    this.setState({ counters })// same as ({counters:counters})\n  }\n\n  render() {\n    console.log('App-Rendered');\n\n    return (\n      <React.Fragment>\n        <NavBar totalCounters={this.state.counters.filter(c => c.value > 0).length} />\n        <main className=\"container\">\n          <Counters counters={this.state.counters} onReset={this.handleReset} onIncrement={this.handleIncrement} onDelete={this.handleDelete} onDecrement={this.handleDecrement} />\n        </main>\n      </React.Fragment>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}